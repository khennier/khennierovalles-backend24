<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
    <link rel="stylesheet" href="/src/public/styles.css">
</head>
<body>
    <div class="container">
        <h1>Your Cart</h1>
        
        <!-- Verificar si el carrito tiene productos -->
        {{#if cart.products.length}}
        <ul id="cart-list">
    {{#each cart.products}}
        <li data-id="{{this.productId._id}}">
            <div class="product-info">
                <div class="product-title">{{this.productId.title}}</div>
                <div class="product-price">$ {{this.productId.price}} x {{this.quantity}} = $ {{multiply this.productId.price this.quantity}}</div>
                <div class="product-actions">
                    <button onclick="updateQuantity('{{this.productId._id}}', 1)">+1</button>
                    <button onclick="updateQuantity('{{this.productId._id}}', -1)">-1</button>
                    <button class="clear-button" onclick="removeFromCart('{{this.productId._id}}')">Remove</button>
                </div>
            </div>
        </li>
    {{/each}}
</ul>

        <h2>Total: $ <span id="total-amount">{{calculateTotal cart.products}}</span></h2>
        <button onclick="clearCart()">Clear Cart</button>
        {{else}}
        <p>Your cart is empty.</p>
        {{/if}}
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const currentUserCartId = "{{cart._id}}";

        function updateQuantity(productId, change) {
            fetch(`/api/carts/${currentUserCartId}/products/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ quantity: change })
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                location.reload(); // Recargar la página para actualizar la vista
            })
            .catch(error => console.error('Error:', error));
        }

        function removeFromCart(productId) {
            fetch(`/api/carts/${currentUserCartId}/products/${productId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                location.reload(); // Recargar la página para actualizar la vista
            })
            .catch(error => console.error('Error:', error));
        }

        function clearCart() {
            fetch(`/api/carts/${currentUserCartId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                location.reload(); // Recargar la página para actualizar la vista
            })
            .catch(error => console.error('Error:', error));

        }
        function fetchProtectedData() {
    const token = localStorage.getItem('token'); // Obtener el token del localStorage

    fetch('/api/admin/product/123', {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}` // Enviar el token en el encabezado
        }
    })
    .then(response => {
        if (response.status === 401 || response.status === 403) {
            // Si la respuesta es 401 o 403, redirigir al login
            window.location.href = '/login';
        } else {
            return response.json();
        }
    })
    .then(data => {
        console.log('Datos protegidos:', data);
    })
    .catch(error => console.error('Error:', error));
}

    </script>
</body>
</html>
